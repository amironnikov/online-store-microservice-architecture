version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    hostname: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

  prometheus:
    image: prom/prometheus
    ports:
      - '9093:9090'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - online_shop_net
    restart: always

  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    hostname: grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/:/etc/grafana/provisioning/
    networks:
      - online_shop_net
    restart: always

  postgres-db:
    image: postgres:14-alpine
    restart: always
    environment:
      POSTGRES_DB: order
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d order" ]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5433:5432"
    volumes:
      - db_data:/var/lib/postgresql/data2
    networks:
      - online_shop_net

  postgres-db-dictionaries:
    image: postgres:14-alpine
    restart: always
    environment:
      POSTGRES_DB: dictionaries
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d order" ]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5434:5432"
    volumes:
      - db_data:/var/lib/postgresql/data3
    networks:
      - online_shop_net

  dictionaries-service:
    build:
      context: ./dictionaries-service
      dockerfile: Dockerfile
    hostname: dictionaries-service
    container_name: dictionaries-service
    ports:
      - "9091:9091"
      - "9090:9090"
    networks:
      - online_shop_net
    restart: always
    depends_on:
      postgres-db-dictionaries:
        condition: service_healthy
      service-registry:
        condition: service_started
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db-dictionaries:5432/dictionaries
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_EUREKA_URL: http://service-registry:8761/eureka/

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    hostname: order-service
    container_name: order-service
    ports:
      - "8083:8083"
    networks:
      - online_shop_net
    restart: always
    depends_on:
      postgres-db:
        condition: service_healthy
      dictionaries-service:
        condition: service_started
      service-registry:
        condition: service_started
    environment:
      SPRING_DATASOURCE_URL: r2dbc:postgresql://postgres-db:5432/order
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_GRPC_ADDRESS: static://dictionaries-service:9090
      SPRING_EUREKA_URL: http://service-registry:8761/eureka/

  service-registry:
    build:
      context: ./service-registry
      dockerfile: Dockerfile
    hostname: service-registry
    container_name: service-registry
    ports:
      - "8761:8761"
    networks:
      - online_shop_net
    restart: always

networks:
  online_shop_net:
    driver: bridge

volumes:
  db_data: