server:
  port: 8083

spring:
  application:
    name: order-service
  r2dbc:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
  kafka:
    producer:
      bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      retries: 10
      topic: order-status
    consumer:
      group-id: order-service-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      topic: order-status
      properties:
        spring:
          json:
            trusted:
              packages: java.util, java.lang, com.fasterxml.jackson.databind.node

grpc:
  client:
    products-grpc-service:
      address: ${SPRING_GRPC_ADDRESS}
      negotiationType: "PLAINTEXT"

eureka:
  instance:
    prefer-ip-address: true
  client:
    serviceUrl:
      defaultZone: ${SPRING_EUREKA_URL}

resilience4j:
  ratelimiter:
    instances:
      rps_limiter_prod:
        limitForPeriod: 2
        limitRefreshPeriod: 1s
        timeoutDuration: 0s
      rps_limiter_order_create:
        limitForPeriod: 2
        limitRefreshPeriod: 1s
        timeoutDuration: 0s
      rps_limiter_all:
        limitForPeriod: 2
        limitRefreshPeriod: 1s
        timeoutDuration: 0s
      rps_limiter_cancel:
        limitForPeriod: 2
        limitRefreshPeriod: 1s
        timeoutDuration: 0s

  circuitbreaker:
    configs:
      default:
        slidingWindowType: COUNT_BASED
        failureRateThreshold: 50
        slidingWindowSize: 10
        waitDurationInOpenState: 10s
        minimumNumberOfCalls: 10
        ringBufferSizeInHalfOpenState: 5
        ringBufferSizeInClosedState: 5
    instances:
      products_circuit_breaker:
        baseConfig: default

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true

logging:
  level:
    root: INFO
    ru.amironnikov: DEBUG